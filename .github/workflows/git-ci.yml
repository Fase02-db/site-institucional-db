name: CI Pipeline

on:
  push:
    branches:
      - main
      - dev
      - test
      - 'feature/**'
      - 'bugfix/**'
      - 'hotfix/**'
      - 'feat/**'
  pull_request:
    branches:
      - main
      - dev
      - test
      - 'feature/**'
      - 'feat/**'
      - 'bugfix/**'
      - 'hotfix/**'

jobs:
  validate-branch:
    name: Validate Branch
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Validar nome do branch
        run: |
          ALLOWED_BRANCHES="main dev test feature/ feat/ bugfix/ hotfix/"
          # Determina o contexto e extrai o nome do branch
          if [[ "${GITHUB_REF}" == refs/pull/* ]]; then
            # Para pull requests, usa o nome do branch base
            BRANCH_NAME=$(jq --raw-output .pull_request.base.ref "$GITHUB_EVENT_PATH")
          else
            # Para pushs normais, extrai o nome do branch diretamente
            BRANCH_NAME=$(echo "${GITHUB_REF#refs/heads/}")
          fi

          # Verifica se o nome do branch corresponde a algum dos padrões permitidos
          for PREFIX in $ALLOWED_BRANCHES; do
            if [[ "$BRANCH_NAME" == $PREFIX* ]]; then
              exit 0
            fi
          done

          echo "Nome do branch '$BRANCH_NAME' não é permitido. Branches permitidos são: $ALLOWED_BRANCHES"
          exit 1
        shell: bash

  build:
    name: Build Project
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.16.0]

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Verify Node.js version
        run: |
          if [ "$(node -v)" != "v${{ matrix.node-version }}" ]; then
            echo "Node.js version mismatch. Expected v${{ matrix.node-version }} but got $(node -v)"
            exit 1
          fi

      - name: Install dependencies
        run: npm install

      - name: Build project
        run: npm run build

  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    needs: build

    strategy:
      matrix:
        node-version: [20.16.0]

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Verify Node.js version
        run: |
          if [ "$(node -v)" != "v${{ matrix.node-version }}" ]; then
            echo "Node.js version mismatch. Expected v${{ matrix.node-version }} but got $(node -v)"
            exit 1
          fi

      - name: Install dependencies
        run: npm install

      - name: Run ESLint
        run: npm run lint

      - name: Run tests with Jest
        run: npm test
